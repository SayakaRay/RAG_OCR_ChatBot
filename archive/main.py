# main.py
import os
from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.responses import StreamingResponse
from dotenv import load_dotenv
from io import BytesIO

# ‡πÇ‡∏´‡∏•‡∏î Environment Variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# Import ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
from storage import S3Storage
from image_manager import ImageManager

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ S3 ---
# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables
S3_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY") # üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ
S3_SECRET_KEY = os.getenv("AWS_SECRET_KEY") # üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ
S3_BUCKET = os.getenv("AWS_BUCKET_NAME")   # üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ
# üí° ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î S3_REGION ‡∏≠‡∏≠‡∏Å

# üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
if not all([S3_ACCESS_KEY, S3_SECRET_KEY, S3_BUCKET]):
    raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ S3 environment variables ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (AWS_ACCESS_KEY, AWS_SECRET_KEY, AWS_BUCKET_NAME)")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á S3Storage ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á region
s3_storage = S3Storage(
    access=S3_ACCESS_KEY,
    secret=S3_SECRET_KEY,
    bucket=S3_BUCKET
)

app = FastAPI(title="Hybrid RAG API")

@app.get("/")
def read_root():
    return {"message": "API is running"}

@app.get("/get-presigned-url/{image_id}")
def get_presigned_url(image_id: str, username: str, project_id: str):
    try:
        url = s3_storage.presigned_url(
            image_id=image_id,
            username=username,
            project_id=project_id,
            expires=3600
        )
        return {"url": url}
    except Exception as e:
        print(f"Error generating presigned URL for {image_id}: {e}")
        raise HTTPException(status_code=404, detail=f"Image not found or error generating URL: {e}")

# TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö /upload ‡πÅ‡∏•‡∏∞ /search-hybrid ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà ui.py ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
@app.post("/upload")
def upload_document(username: str = Form(...), project_id: str = Form(...), file: UploadFile = File(...)):
    # ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OCR Processor ‡πÅ‡∏•‡∏∞ ImageManager
    content = file.file.read()
    results = process_uploaded_file(content, file.filename, s3_storage, username, project_id)
    return {"message": "Upload endpoint needs to be fully implemented."}

@app.get("/search-hybrid")
def search_hybrid(user_query: str, top_k: int, top_rerank: int, alpha: float):
    # ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ RAG logic ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    return {"generated_answer": "Search endpoint needs to be fully implemented. ![Image](example_image_id.jpg)"}